<style>
    .row-depth0 [data-row-control=depth-out],
    tr:first-child [data-row-control=order-up],
    tr:last-child [data-row-control=order-down] {
        display: none
    }

    .row-depth1 th,
    .row-depth1 td {
        background-color: #eee;
    }

    .row-depth2 th,
    .row-depth2 td {
        background-color: #ddd;
    }

    .row-depth3 th,
    .row-depth3 td {
        background-color: #ccc;
    }

    .row-depth4 th,
    .row-depth4 td {
        background-color: #bbb;
    }

    .tbl_wrap .cell-control-depth,
    .tbl_wrap .cell-control-order {
        width: 120px;
    }

    .tbl_wrap .cell-classes,
    .tbl_wrap .cell-icons {
        width: 100px;
    }

    .tbl_wrap .cell-uses {
        width: 50px
    }
</style>

<?= descOpen ?>
<ul>
    <li>편집 후 <em>확인을 눌러 저장해야 정상</em> 반영 됩니다.</li>
    <li>주소가 `/`, '#', '?'로 시작하지 않으면, 부모의 하위 주소가 됩니다.</li>
    <li>방식이 `child`인 경우 첫번째 주식 메뉴의 주소를 링크 합니다.</li>
</ul>
<?= descClose ?>

<?= formOpen() ?>
<table>
    <thead>
    <tr>
        <th class="cell-">메뉴명</th>
        <th class="cell-classes">클래스</th>
        <th class="cell-icons">아이콘</th>
        <th class="cell-address">주소</th>
        <th class="cell-target">방식</th>
        <th class="cell-checkbox">사용</th>
        <th class="cell-control-depth">깊이</th>
        <th class="cell-control-order">순서</th>
        <th class="cell-control">관리</th>
    </tr>
    </thead>
    <tbody data-row-section>
    <?php foreach ($navs as $nav) {
        $id = $nav['id'];
        $depth = $nav['depth'];
        ?>
        <tr class="row-depth<?= $depth ?>" data-row-control>
            <th class="cell-name">
                <input type="hidden" name="updates[]" value="<?= $id ?>" data-row-control="update">
                <input type="hidden" name="depths[<?= $id ?>]" value="<?= $depth ?>" data-row-control="depth" cols="2">

                <div style="padding-left:<?= $depth * 40 ?>px" data-row-control="depth-space">
                    <?= input('names[' . $id . ']', $nav['name'], CONTROL_REQUIRED) ?>
                </div>
            </th>
            <?= tdInput('classes[' . $id . ']', $nav['class']) ?>
            <?= tdInput('icons[' . $id . ']', $nav['icons']) ?>

            <?= tdInput('links[' . $id . ']', $nav['link'], CONTROL_REQUIRED) ?>
            <?= tdInput('targets[' . $id . ']', $nav['target']) ?>
            <td>
                <input type="checkbox" name="uses[<?= $id ?>]" <?= checked($nav['use']) ?>>
            </td>

            <td class="cell-control cell-control-depth">
                <button type="button" data-row-control="depth-out">내기</button>
                <button type="button" data-row-control="depth-in">들이기</button>
            </td>

            <td class="cell-control cell-control-order">
                <button type="button" data-row-control="order-up">위로</button>
                <button type="button" data-row-control="order-down">아래로</button>
            </td>

            <td class="cell-control">
                <button type="button" data-row-control="add-top">위에 추가</button>
                <button type="button" data-row-control="add-bottom">아래 추가</button>
                <button type="button" data-row-control="remove">삭제</button>
            </td>
        </tr>
    <?php } //endforeach ?>
    </tbody>
</table>

<?= buttonsOpen ?>
<button type="button" class="btn btn_02" data-row-control="add">최상위 메뉴 추가</button>
<?= buttonSubmit() ?>
<?= buttonsClose ?>
<?= formClose ?>

<script>
	/**
	 * pure table row controller
	 * @author protyliss
	 */
	(function (window, document) {
		var body = document.body;

		var addIndex = 10000000;

		var controls = {
			'depth-in': function (store) {
				controlDepth(store, +1);
			},
			'depth-out': function (store) {
				controlDepth(store, -1);
			},
			'order-up': function (store) {
				controlOrder(store, -1);
			},
			'order-down': function (store) {
				controlOrder(store, +1);
			},
			'add': function (store) {
				var section = store.section || (store.section = document.body.querySelector('[data-row-section]'));
				var row = section.firstElementChild.cloneNode(true);
				var index = addIndex++;

				section.appendChild(row);

				Array.from(row.querySelectorAll('input, textarea, select'))
					.filter(node => {
						node.name = node.name.replace(/\[.+]/, '[' + index + ']');

						if (node.tagName === 'INPUT') {
							var type = node.type;
							if (type !== 'checkbox') {
								node.value = '';
								if (type === 'hidden') {
									if (node.name.indexOf('updates') > -1) {
										node.value = index;
									}
								} else {
									if (node.name.indexOf('targets') > -1) {
										node.value = 'self';
									}
									return true;
								}
							}
						} else {
							node.value = '';
						}
					})[0].focus();
			},
			'add-top': function (store) {
				console.log(store);
			},
			'add-bottom': function (store) {
				console.log(store);
			},
			'remove': function (store) {
				if (confirm('정말 삭제할까요?')) {
					var row = store.row;
					var rows = row.parentNode.rows;
					var rowIndex = row.sectionRowIndex;
					var inputDepth = getInputDepth(store);
					var depth = Number(inputDepth.value);
					setUpdate(row);

					inputDepth.value = -1;
					row.style.display = 'none';

					while (rows[++rowIndex]) {
						row = rows[rowIndex];
						store = getRowStore(row);
						inputDepth = getInputDepth(store);
						if (depth < Number(inputDepth.value)) {
							controlDepth(store, -1);
						} else {
							break;
						}
					}
				}
			}
		};

		Array.from(document.querySelectorAll('input[data-row-control=update]'))
			.forEach(function (input) {
				input.disabled = true;
			});

		// delegate events

		body.addEventListener('change', function (event) {
			var target = event.target;
			var tagName = target.tagName;
			if (target._rowControlChange === false || (tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA')) {
				target._rowControlChange = false;
				return true;
			}

			var row = getRow(target);
			if (!row.getAttribute('data-row-control') === null) {
				target._rowControlChange = false;
			}

			setUpdate(row);
		});

		body.addEventListener('click', function (event) {
			var target = event.target;
			if (target._rowControlButton === false || target.tagName !== 'BUTTON') {
				target._rowControlButton = false;
				return true;
			}
			var type = target.getAttribute('data-row-control');
			if (type === '') {
				target._rowControlButton = false;
				return true;
			}

			if (!target['_rowControl']) {
				var row = getRow(target);
				target._rowControl = {
					method: controls[type],
					row: row,
				};
			}

			var store = target._rowControl;
			store.method.call(target, store);
		});


		function getInputDepth(store) {
			return store.inputDepth || (store.inputDepth = getInput(store.row, 'depth'));
		}

		function controlDepth(store, increase) {
			var row = store.row;
			var input = getInputDepth(store);


			var value = Number(input.value);
			var changedValue = value + increase;
			if (changedValue > -1) {
				input.value = changedValue;

				row.className = row.className.replace(/(row-depth)\d/, '$1' + changedValue);

				var space = store.depthSpace || (store.depthSpace = get(row, 'depth-space'));
				if (space) {
					space.style.paddingLeft = changedValue * 40 + 'px';
				}
			}

			setUpdate(row);
		}

		function controlOrder(store, increase) {
			var row = store.row;

			var index = row.sectionRowIndex;
			var table = row.parentNode;
			var rows = table.rows;


			if (increase < 0 && index) {
				var before = rows[index - 1];
				if (before) {
					table.insertBefore(row, before);
					setUpdate(row);
					setUpdate(before);
				}
			} else {
				var after = rows[index + 1];
				if (after) {
					table.insertBefore(row, after.nextSibling);
					setUpdate(row);
					setUpdate(after);
				}
			}
		}

		function getRowStore(row) {
			if (!row['_rowControl']) {
				var updateInput = getInput(row, 'update');
				updateInput.disabled = true;
				row._rowControl = {
					row: row,
					updateInput: updateInput
				}
			}
			return row._rowControl;
		}

		function setUpdate(row) {
			getRowStore(row).updateInput.disabled = false;
		}

		function getRow(button) {
			// todo: polyfill?
			return button.closest('tr');
		}

		function get(row, name) {
			return row.querySelector('[data-row-control=' + name + ']');
		}

		function getInput(row, name) {
			return row.querySelector('input[data-row-control=' + name + ']');
		}
	})(window, document);


</script>